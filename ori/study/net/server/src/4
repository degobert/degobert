/*
 * =====================================================================================
 *
 *       Filename:  server.cpp
 *
 *    Description:  Test  
 *    多进程阻塞  优化  有问题
 *    父进程listen,有请求进来就fork一个子进程， 子进程accept之后去处理， 处理完后就退出
 *
 *        Version:  1.0
 *        Created:  2014年08月20日 11时42分30秒
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  degobert (dh), degobert@163.com
 *        Company:  degobert
 *
 * =====================================================================================
 */
#include "head.h"
#include "env.h"
char buf[MAXSIZE];
int main(int argc, char* argv[])
{
    signal(SIGPIPE, SIG_IGN);
    signal(SIGCHLD, SIG_IGN);
    std::cout<<"hello world\n";
    printf("maxsize = %d\n", MAXSIZE);
    int listen_fd, read_fd;
    struct sockaddr_in listen_addr, client_addr;
    socklen_t len = sizeof(struct sockaddr_in);
    listen_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (listen_fd == -1)
    {
        perror("socket error");
        return -1;
    }
    bzero(&listen_addr, sizeof(listen_addr));
    listen_addr.sin_family = AF_INET;
    listen_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    listen_addr.sin_port = htons(SERV_PORT);
    bind(listen_fd, (struct sockaddr *)&listen_addr, len);
    listen(listen_fd, 3);
    int max_pro_num = 10;
    int pid = -1;
    int child_process_status = 5000;
    for ( int i = 0; i < max_pro_num; i++ ) {
        if (pid != 0 ) {
            pid = fork();
            printf("a =%d\n", pid);
        }
    }

    if (pid == 0 ) {
        while(1) {
            read_fd = accept(listen_fd, (struct sockaddr*)&client_addr, &len);
            if (read_fd == -1) { perror("accpet error");  return -1; }
            memset(buf, 0, MAXSIZE);
            int recv_num = 0;
            while(1) {
                recv(read_fd, &buf, MAXSIZE,0);
                if (recv_num == 0 ) {
                    printf("close socket\n");
                    close(read_fd);
                    break;
                } else { printf("accept %d: %s\n",recv_num, buf);}
            }
        }

    }else {
        printf("a\n");
        wait(child_process_status);
    }
    return  0;
}
